---
source: hydroflow_datalog_core/src/lib.rs
expression: "prettyplease::unparse(&wrapped)"
---
fn main() {
    {
        #[allow(unused_qualifications)]
        {
            use hydroflow::{var_expr, var_args};
            let mut df = hydroflow::scheduled::graph::Hydroflow::new();
            df.__assign_meta_graph(
                "{\"nodes\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":2},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Operator\":\"tee ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"source_stream (input)\"},\"version\":1},{\"value\":{\"Operator\":\"for_each (| v | out . send (v) . unwrap ())\"},\"version\":1},{\"value\":{\"Operator\":\"join :: < 'tick , 'tick , hydroflow :: compiled :: pull :: HalfMultisetJoinState > ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| kv : ((_ , _ ,) , (() , ())) | (kv . 0 . 0 , kv . 0 . 1 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| _v : (_ , _ ,) | ((_v . 0 , _v . 1 ,) , ()))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| _v : (_ , _ ,) | ((_v . 1 , _v . 0 ,) , ()))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ , _ ,) | ((row . 0 , row . 1 ,) , ()))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| (g , a) : ((_ , _ ,) , _) | (g . 0 , g . 1 ,))\"},\"version\":1}],\"graph\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":7,\"version\":1},{\"idx\":2,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":2,\"version\":1},{\"idx\":3,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":14,\"version\":1},{\"idx\":5,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":6,\"version\":3},{\"idx\":11,\"version\":1}],\"version\":3},{\"value\":null,\"version\":2},{\"value\":[{\"idx\":5,\"version\":1},{\"idx\":8,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":9,\"version\":1},{\"idx\":10,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":11,\"version\":1},{\"idx\":9,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":3,\"version\":1},{\"idx\":6,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":12,\"version\":1},{\"idx\":9,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":3,\"version\":1},{\"idx\":4,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":4,\"version\":3},{\"idx\":12,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":13,\"version\":1},{\"idx\":14,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":10,\"version\":1},{\"idx\":13,\"version\":1}],\"version\":1}],\"ports\":[{\"value\":null,\"version\":0},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":null,\"version\":0},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Int\":\"0\"}],\"version\":1},{\"value\":[{\"Int\":\"0\"},\"Elided\"],\"version\":3},{\"value\":[\"Elided\",{\"Int\":\"1\"}],\"version\":1},{\"value\":[{\"Int\":\"1\"},\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1}],\"node_subgraph\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1}],\"subgraph_nodes\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":7,\"version\":1},{\"idx\":2,\"version\":1},{\"idx\":3,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":11,\"version\":1},{\"idx\":12,\"version\":1},{\"idx\":9,\"version\":1},{\"idx\":10,\"version\":1},{\"idx\":13,\"version\":1},{\"idx\":14,\"version\":1},{\"idx\":5,\"version\":1},{\"idx\":8,\"version\":1}],\"version\":1}],\"subgraph_stratum\":[{\"value\":null,\"version\":0},{\"value\":0,\"version\":1},{\"value\":0,\"version\":1}],\"node_varnames\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"input_insert\",\"version\":1},{\"value\":\"input\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":\"out_insert\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"join_0\",\"version\":1},{\"value\":\"join_0\",\"version\":1}]}",
            );
            df.__assign_diagnostics("[]");
            let (hoff_4v3_send, hoff_4v3_recv) = df
                .make_edge::<
                    _,
                    hydroflow::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(4v3)");
            let (hoff_6v3_send, hoff_6v3_recv) = df
                .make_edge::<
                    _,
                    hydroflow::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(6v3)");
            let mut sg_1v1_node_7v1_stream = {
                #[inline(always)]
                fn check_stream<
                    Stream: hydroflow::futures::stream::Stream<Item = Item>
                        + ::std::marker::Unpin,
                    Item,
                >(
                    stream: Stream,
                ) -> impl hydroflow::futures::stream::Stream<
                    Item = Item,
                > + ::std::marker::Unpin {
                    stream
                }
                check_stream(input)
            };
            let sg_1v1_node_2v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        hydroflow::util::monotonic_map::MonotonicMap::<
                            _,
                            hydroflow::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(1v1)",
                0,
                var_expr!(),
                var_expr!(hoff_4v3_send, hoff_6v3_send),
                move |context, var_args!(), var_args!(hoff_4v3_send, hoff_6v3_send)| {
                    let hoff_4v3_send = hydroflow::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_4v3_send.give(Some(v));
                    });
                    let hoff_6v3_send = hydroflow::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_6v3_send.give(Some(v));
                    });
                    let op_7v1 = std::iter::from_fn(|| {
                        match hydroflow::futures::stream::Stream::poll_next(
                            ::std::pin::Pin::new(&mut sg_1v1_node_7v1_stream),
                            &mut std::task::Context::from_waker(&context.waker()),
                        ) {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        }
                    });
                    let op_7v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_7v1__source_stream__loc_unknown_start_2_26_end_2_46<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_7v1__source_stream__loc_unknown_start_2_26_end_2_46(op_7v1)
                    };
                    let op_2v1 = op_7v1
                        .filter(|item| {
                            let mut borrow = context
                                .state_ref(sg_1v1_node_2v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .get_mut_clear((
                                    context.current_tick(),
                                    context.current_stratum(),
                                ));
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        });
                    let op_2v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_2v1__unique__loc_unknown_start_2_19_end_2_24<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_2v1__unique__loc_unknown_start_2_19_end_2_24(op_2v1)
                    };
                    let op_3v1 = hydroflow::pusherator::tee::Tee::new(
                        hoff_6v3_send,
                        hoff_4v3_send,
                    );
                    let op_3v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_3v1__tee__loc_unknown_start_2_19_end_2_24<
                            Item,
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                            struct Push<
                                Item,
                                Input: hydroflow::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: hydroflow::pusherator::Pusherator<Item = Item>,
                            > hydroflow::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_3v1__tee__loc_unknown_start_2_19_end_2_24(op_3v1)
                    };
                    #[inline(always)]
                    fn check_pivot_run<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    check_pivot_run(op_2v1, op_3v1);
                },
            );
            let sg_2v1_node_9v1_joindata_lhs = df
                .add_state(
                    std::cell::RefCell::new(
                        hydroflow::util::monotonic_map::MonotonicMap::new_init(
                            hydroflow::compiled::pull::HalfMultisetJoinState::default(),
                        ),
                    ),
                );
            let sg_2v1_node_9v1_joindata_rhs = df
                .add_state(
                    std::cell::RefCell::new(
                        hydroflow::util::monotonic_map::MonotonicMap::new_init(
                            hydroflow::compiled::pull::HalfMultisetJoinState::default(),
                        ),
                    ),
                );
            let sg_2v1_node_9v1_persisttick = df
                .add_state(std::cell::RefCell::new(0usize));
            let sg_2v1_node_5v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        hydroflow::util::monotonic_map::MonotonicMap::<
                            _,
                            hydroflow::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(2v1)",
                0,
                var_expr!(hoff_4v3_recv, hoff_6v3_recv),
                var_expr!(),
                move |context, var_args!(hoff_4v3_recv, hoff_6v3_recv), var_args!()| {
                    let mut hoff_4v3_recv = hoff_4v3_recv.borrow_mut_swap();
                    let hoff_4v3_recv = hoff_4v3_recv.drain(..);
                    let mut hoff_6v3_recv = hoff_6v3_recv.borrow_mut_swap();
                    let hoff_6v3_recv = hoff_6v3_recv.drain(..);
                    let op_11v1 = hoff_6v3_recv.map(|_v: (_, _)| ((_v.0, _v.1), ()));
                    let op_11v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_11v1__map__loc_unknown_start_5_25_end_5_36<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_11v1__map__loc_unknown_start_5_25_end_5_36(op_11v1)
                    };
                    let op_12v1 = hoff_4v3_recv.map(|_v: (_, _)| ((_v.1, _v.0), ()));
                    let op_12v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_12v1__map__loc_unknown_start_5_38_end_5_49<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_12v1__map__loc_unknown_start_5_38_end_5_49(op_12v1)
                    };
                    let mut sg_2v1_node_9v1_joindata_lhs_borrow = context
                        .state_ref(sg_2v1_node_9v1_joindata_lhs)
                        .borrow_mut();
                    let mut sg_2v1_node_9v1_joindata_rhs_borrow = context
                        .state_ref(sg_2v1_node_9v1_joindata_rhs)
                        .borrow_mut();
                    let mut sg_2v1_node_9v1_persisttick_borrow = context
                        .state_ref(sg_2v1_node_9v1_persisttick)
                        .borrow_mut();
                    let op_9v1 = {
                        #[inline(always)]
                        fn check_inputs<'a, K, I1, V1, I2, V2>(
                            mut lhs: I1,
                            mut rhs: I2,
                            lhs_state: &'a mut hydroflow::compiled::pull::HalfMultisetJoinState<
                                K,
                                V1,
                                V2,
                            >,
                            rhs_state: &'a mut hydroflow::compiled::pull::HalfMultisetJoinState<
                                K,
                                V2,
                                V1,
                            >,
                            is_new_tick: bool,
                        ) -> impl 'a + Iterator<Item = (K, (V1, V2))>
                        where
                            K: Eq + std::hash::Hash + Clone,
                            V1: Clone,
                            V2: Clone,
                            I1: 'a + Iterator<Item = (K, V1)>,
                            I2: 'a + Iterator<Item = (K, V2)>,
                        {
                            use hydroflow::compiled::pull::HalfJoinState;
                            enum Either<ILhs, IRhs, K, V1, V2>
                            where
                                ILhs: Iterator<Item = (K, V1)>,
                                IRhs: Iterator<Item = (K, V2)>,
                            {
                                Lhs(ILhs),
                                Rhs(IRhs),
                                None,
                            }
                            fn extend_lifetime<'a, 'b, T>(x: &'a mut T) -> &'b mut T
                            where
                                'b: 'a,
                            {
                                unsafe { &mut *(x as *mut T) }
                            }
                            let mut keys = if is_new_tick {
                                if lhs_state.len() < rhs_state.len() {
                                    Either::Lhs(extend_lifetime(lhs_state).iter())
                                } else {
                                    Either::Rhs(extend_lifetime(rhs_state).iter())
                                }
                            } else {
                                Either::None
                            };
                            ::std::iter::from_fn(move || {
                                loop {
                                    if let ::std::option::Option::Some((k, v2, v1))
                                        = lhs_state.pop_match()
                                    {
                                        return ::std::option::Option::Some((k, (v1, v2)));
                                    }
                                    if let ::std::option::Option::Some((k, v1, v2))
                                        = rhs_state.pop_match()
                                    {
                                        return ::std::option::Option::Some((k, (v1, v2)));
                                    }
                                    match keys {
                                        Either::Lhs(ref mut x) => {
                                            while let ::std::option::Option::Some((k, v1)) = x.next() {
                                                if let ::std::option::Option::Some((k, v1, v2))
                                                    = rhs_state.probe(&k, &v1)
                                                {
                                                    return ::std::option::Option::Some((k, (v1, v2)));
                                                }
                                                continue;
                                            }
                                        }
                                        Either::Rhs(ref mut x) => {
                                            while let ::std::option::Option::Some((k, v2)) = x.next() {
                                                if let ::std::option::Option::Some((k, v2, v1))
                                                    = lhs_state.probe(&k, &v2)
                                                {
                                                    return ::std::option::Option::Some((k, (v1, v2)));
                                                }
                                                continue;
                                            }
                                        }
                                        Either::None => {}
                                    }
                                    keys = Either::None;
                                    if let ::std::option::Option::Some((k, v1)) = lhs.next() {
                                        if lhs_state.build(k.clone(), &v1) {
                                            if let ::std::option::Option::Some((k, v1, v2))
                                                = rhs_state.probe(&k, &v1)
                                            {
                                                return ::std::option::Option::Some((k, (v1, v2)));
                                            }
                                        }
                                        continue;
                                    }
                                    if let ::std::option::Option::Some((k, v2)) = rhs.next() {
                                        if rhs_state.build(k.clone(), &v2) {
                                            if let ::std::option::Option::Some((k, v2, v1))
                                                = lhs_state.probe(&k, &v2)
                                            {
                                                return ::std::option::Option::Some((k, (v1, v2)));
                                            }
                                        }
                                        continue;
                                    }
                                    return None;
                                }
                            })
                        }
                        {
                            let __is_new_tick = if *sg_2v1_node_9v1_persisttick_borrow
                                < context.current_tick()
                            {
                                *sg_2v1_node_9v1_persisttick_borrow = context
                                    .current_tick();
                                true
                            } else {
                                false
                            };
                            check_inputs(
                                op_11v1,
                                op_12v1,
                                &mut *sg_2v1_node_9v1_joindata_lhs_borrow
                                    .get_mut_clear(context.current_tick()),
                                &mut *sg_2v1_node_9v1_joindata_rhs_borrow
                                    .get_mut_clear(context.current_tick()),
                                __is_new_tick,
                            )
                        }
                    };
                    let op_9v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_9v1__join__loc_unknown_start_5_12_end_5_50<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_9v1__join__loc_unknown_start_5_12_end_5_50(op_9v1)
                    };
                    let op_10v1 = op_9v1.map(|kv: ((_, _), ((), ()))| (kv.0.0, kv.0.1));
                    let op_10v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_10v1__map__loc_unknown_start_5_12_end_5_50<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_10v1__map__loc_unknown_start_5_12_end_5_50(op_10v1)
                    };
                    let op_13v1 = op_10v1.map(|row: (_, _)| ((row.0, row.1), ()));
                    let op_13v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_13v1__map__loc_unknown_start_1_0_end_1_0<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_13v1__map__loc_unknown_start_1_0_end_1_0(op_13v1)
                    };
                    let op_14v1 = op_13v1.map(|(g, a): ((_, _), _)| (g.0, g.1));
                    let op_14v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_14v1__map__loc_unknown_start_1_0_end_1_0<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_14v1__map__loc_unknown_start_1_0_end_1_0(op_14v1)
                    };
                    let op_5v1 = op_14v1
                        .filter(|item| {
                            let mut borrow = context
                                .state_ref(sg_2v1_node_5v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .get_mut_clear((
                                    context.current_tick(),
                                    context.current_stratum(),
                                ));
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        });
                    let op_5v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_5v1__unique__loc_unknown_start_3_20_end_3_23<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_5v1__unique__loc_unknown_start_3_20_end_3_23(op_5v1)
                    };
                    let op_8v1 = hydroflow::pusherator::for_each::ForEach::new(|v| {
                        out.send(v).unwrap()
                    });
                    let op_8v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_8v1__for_each__loc_unknown_start_3_25_end_3_59<
                            Item,
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                            struct Push<
                                Item,
                                Input: hydroflow::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: hydroflow::pusherator::Pusherator<Item = Item>,
                            > hydroflow::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_8v1__for_each__loc_unknown_start_3_25_end_3_59(op_8v1)
                    };
                    #[inline(always)]
                    fn check_pivot_run<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    check_pivot_run(op_5v1, op_8v1);
                },
            );
            df
        }
    }
}

